{{'grid.css' |  asset_url | stylesheet_tag}}

<p class="section_title">Tisso vison in the wild</p>
<!-- Creating the grid layout and setting product date for use in javascript -->
<div class="grid">
    {% for product in section.settings.product_list %}
      <div class="product" data-image = "{{ product.featured_image|img_url:"600x600" }}" data-title="{{ product.title }}" data-price="{{ product.price | money }}" data-description= "{{ product.description }}" 
        data-options= "{{ product.options_with_values | json | escape}}" data-variants="{{ product.variants | json | escape }}">
        <img class="product_img" src="{{ product.featured_image| img_url: '480x480' }}" alt="{{ product.title }}" width="100%" height="auto">
        

      </div>
    {% endfor %}
</div>
<!-- Creating Modal layout -->
<div id="modal" class="modal">
    <span id="modalCloseButton" class="modal_close_button">
      &#10006;
    </span>
  <div class="modal_content">
    <div class="modal_img_container">
      <img id="modalImage" class="modal_img" src="{{ product.featured_image| img_url: '480x480' }}" alt="{{ product.title }}" width="100px" height="100px">
    </div>
    <div class="modal_text">
      <p id="modalTitle" class="modal_title"> product title </p>
      <p id="modalPrice" class="modal_price"> Product Price </p>
      <p id="modalDescription" class="modal_description"> Product description </p>
    </div> 
  </div>


  <p class="color_div_title"> Color </p>
  <div id="modalColors" class="modal_color_selection">
    
  </div>
      <p class="size_div_title"> Size </p>

  <div id="modalSizes" class="modal_size_selection">
  </div>

  <form id="addToCartForm" action="/cart/add" method="post">
    <input type="hidden" id="variantIdInput" name="id" value="">
    <input type="hidden" id="quantityInput" name="quantity" value="1">
    <button type="submit" class="add_to_cart_button"> ADD TO CART &#8594; </button>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded',()=>{
    //creating constants for the html elements 
    const modal = document.getElementById('modal');
    const modalCloseButton=document.getElementById('modalCloseButton');
    const addToCartForm = document.getElementById('addToCartForm');
    const quantityInput = document.getElementById('quantityInput');
    const variantIdInput= document.getElementById('variantIdInput')
    let selectedColor=null;
    let selectedSize = null;
    //loading product data from the data product set up at the html element when a product is pressed
    document.querySelectorAll('.product').forEach((product) =>{
      product.addEventListener('click',(e) =>{
        const productData= e.currentTarget.dataset;
        variants= JSON.parse(productData.variants);
        document.getElementById('modalImage').src=productData.image;
        document.getElementById('modalTitle').innerText=productData.title;
        document.getElementById('modalPrice').innerText=productData.price;
        document.getElementById('modalDescription').innerHTML=productData.description;
        

        
        const options=JSON.parse(productData.options);
        //setting up color and size constants to load available options dynamically 
        options.forEach(option => {
          if (option.name==='Color'){
            colorOption=option;
          }
          else if(option.name === 'Size'){
            sizeOption=option;
          }
        })
       //setting options as empty to restart whenever option is changed
        modalColors.innerHTML = '';
        modalSizes.innerHTML = '';
        //loading color options and creating dynamic html elements aswell
        if(colorOption){
          colorOption.values.forEach((color) =>{
            const colorChoice = document.createElement('div');
            colorChoice.classList.add('color_choice');
  
            const colorShowcase=document.createElement('span');
            const colorName=document.createElement('span');
            colorShowcase.classList.add('color_showcase');
            colorName.classList.add('color_name');
            //setting background color of the strip sample to be the same as the option color
            colorShowcase.style.backgroundColor=color;
            colorName.innerHTML='<p>'+color+'</p>';
            colorChoice.appendChild(colorShowcase);  
            colorChoice.appendChild(colorName);
            modalColors.appendChild(colorChoice);
            //setting event so when a color is clicked the option is highlighted
            colorChoice.addEventListener('click', () => {
            document.querySelectorAll('.color_choice').forEach(el => {
              el.querySelector('.color_name').style.backgroundColor = 'white';
              el.querySelector('.color_name').style.color = 'black';
            });
            colorName.style.backgroundColor = 'black'; 
            colorName.style.color = 'white';
            selectedColor = color;
          });
        });
          
        }
        //setting size option and creating dynamic html elements 
        if (sizeOption) {
        const sizeSelect = document.createElement('select'); 
        sizeOption.values.forEach((size) => {
          const sizeOptionElement = document.createElement('option');
          sizeSelect.classList.add('size_select');
          sizeOptionElement.classList.add('size_option_element')
          sizeOptionElement.value = size;
          sizeOptionElement.innerText = size;
          sizeSelect.appendChild(sizeOptionElement);
        });
        modalSizes.appendChild(sizeSelect); 

        sizeSelect.addEventListener('change', () => {
          selectedSize = sizeSelect.value;
          
        });
      }
        //switching display of modal  from none to block when a product is clicked to show the product modal
        modal.style.display='block';
      });
    });
    //closing modal when the x button is pressed
    modalCloseButton.addEventListener('click', ()=>{
      modal.style.display='none';
    })
    
    addToCartForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      //searching for the variant where both color and size that the user selected match with
      const selectedVariant =variants.find(variant => {
        const includesColor = variant.options.includes(selectedColor);
        const includesSize = variant.options.includes(selectedSize);
        return includesColor && includesSize;
      });
      if(!selectedVariant){
        //error alert for when user presses add to cart while not choosing options
        alert('Fill missing options first.');
        return;
        
      }
      //setting the variant id that the api needs for the request and appending the data to the form
      variantIdInput.value=selectedVariant.id;
      const formData = new FormData();
      formData.append('id', selectedVariant.id);
      formData.append('quantity', quantityInput.value);
      try{
        const response = await fetch('/cart/add.js',{
          method : 'POST',
          body : formData
        });
        
        //setting logic for whenever a black medium product is added to cart the soft winter jacket will be then automatically added to cart
        if(selectedColor=='Black' && selectedSize=='M'){
          //gettig the soft winter jacket produt details and then getting the black medium variant aswell
          const additionalProductResponse=await fetch('/products/dark-winter-jacket.js');
          const additionalProduct= await additionalProductResponse.json();
          const additionalProductVariant=additionalProduct.variants.find((variant) =>{
            return variant.options.includes(selectedColor) && variant.options.includes(selectedSize);
          });
          
          //if the soft winter jacket with the requested variant is found a new form is created to add the product to the cart
          if(additionalProductVariant){
            const additionalProductFormData = new FormData();
            additionalProductFormData.append('id',additionalProductVariant.id);
            additionalProductFormData.append('quantity','1');
            fetch('/cart/add.js',{
            method : 'POST',
            body : additionalProductFormData
          });
            console.log('Additional product added succesfully');
          }
        }
        alert('Product added to Cart!');
        modal.style.display = 'none';
        
      }
      catch (error){
        console.error('Error adding product to cart', error);
        alert('Failed to add producta to cart');
      }
      
    });
    
  });
  
</script>

<!-- setting schema to select products to display at the home page-->
{% schema %} 
  {
    "name": "grid",
    "settings": [
      {
        "type": "product_list",
        "id": "product_list",
        "label": "Select the Products to be featured",
        "limit": 6
        
      }
    ]
  }
{% endschema %}